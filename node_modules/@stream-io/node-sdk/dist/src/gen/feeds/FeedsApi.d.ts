import { ApiClient, StreamResponse } from '../../gen-imports';
import { AcceptFeedMemberInviteRequest, AcceptFeedMemberInviteResponse, AcceptFollowRequest, AcceptFollowResponse, ActivityFeedbackRequest, ActivityFeedbackResponse, AddActivityRequest, AddActivityResponse, AddBookmarkRequest, AddBookmarkResponse, AddCommentReactionRequest, AddCommentReactionResponse, AddCommentRequest, AddCommentResponse, AddCommentsBatchRequest, AddCommentsBatchResponse, AddReactionRequest, AddReactionResponse, CastPollVoteRequest, CreateFeedGroupRequest, CreateFeedGroupResponse, CreateFeedViewRequest, CreateFeedViewResponse, CreateFeedsBatchRequest, CreateFeedsBatchResponse, CreateMembershipLevelRequest, CreateMembershipLevelResponse, DeleteActivitiesRequest, DeleteActivitiesResponse, DeleteActivityReactionResponse, DeleteActivityResponse, DeleteBookmarkFolderResponse, DeleteBookmarkResponse, DeleteCommentReactionResponse, DeleteCommentResponse, DeleteFeedGroupResponse, DeleteFeedResponse, DeleteFeedUserDataResponse, DeleteFeedViewResponse, ExportFeedUserDataResponse, FollowBatchRequest, FollowBatchResponse, FollowRequest, GetActivityResponse, GetCommentRepliesResponse, GetCommentResponse, GetCommentsResponse, GetFeedGroupResponse, GetFeedViewResponse, GetFeedVisibilityResponse, GetFollowSuggestionsResponse, GetOrCreateFeedGroupRequest, GetOrCreateFeedGroupResponse, GetOrCreateFeedRequest, GetOrCreateFeedResponse, GetOrCreateFeedViewRequest, GetOrCreateFeedViewResponse, ListFeedGroupsResponse, ListFeedViewsResponse, ListFeedVisibilitiesResponse, MarkActivityRequest, PinActivityRequest, PinActivityResponse, PollVoteResponse, QueryActivitiesRequest, QueryActivitiesResponse, QueryActivityReactionsRequest, QueryActivityReactionsResponse, QueryBookmarkFoldersRequest, QueryBookmarkFoldersResponse, QueryBookmarksRequest, QueryBookmarksResponse, QueryCommentReactionsRequest, QueryCommentReactionsResponse, QueryCommentsRequest, QueryCommentsResponse, QueryFeedMembersRequest, QueryFeedMembersResponse, QueryFeedsRequest, QueryFeedsResponse, QueryFollowsRequest, QueryFollowsResponse, QueryMembershipLevelsRequest, QueryMembershipLevelsResponse, RejectFeedMemberInviteRequest, RejectFeedMemberInviteResponse, RejectFollowRequest, RejectFollowResponse, Response, SingleFollowResponse, UnfollowBatchRequest, UnfollowBatchResponse, UnfollowResponse, UnpinActivityResponse, UpdateActivityPartialRequest, UpdateActivityPartialResponse, UpdateActivityRequest, UpdateActivityResponse, UpdateBookmarkFolderRequest, UpdateBookmarkFolderResponse, UpdateBookmarkRequest, UpdateBookmarkResponse, UpdateCommentRequest, UpdateCommentResponse, UpdateFeedGroupRequest, UpdateFeedGroupResponse, UpdateFeedMembersRequest, UpdateFeedMembersResponse, UpdateFeedRequest, UpdateFeedResponse, UpdateFeedViewRequest, UpdateFeedViewResponse, UpdateFollowRequest, UpdateFollowResponse, UpdateMembershipLevelRequest, UpdateMembershipLevelResponse, UpsertActivitiesRequest, UpsertActivitiesResponse } from '../models';
export declare class FeedsApi {
    readonly apiClient: ApiClient;
    constructor(apiClient: ApiClient);
    addActivity(request: AddActivityRequest): Promise<StreamResponse<AddActivityResponse>>;
    upsertActivities(request: UpsertActivitiesRequest): Promise<StreamResponse<UpsertActivitiesResponse>>;
    deleteActivities(request: DeleteActivitiesRequest): Promise<StreamResponse<DeleteActivitiesResponse>>;
    queryActivities(request?: QueryActivitiesRequest): Promise<StreamResponse<QueryActivitiesResponse>>;
    deleteBookmark(request: {
        activity_id: string;
        folder_id?: string;
        user_id?: string;
    }): Promise<StreamResponse<DeleteBookmarkResponse>>;
    updateBookmark(request: UpdateBookmarkRequest & {
        activity_id: string;
    }): Promise<StreamResponse<UpdateBookmarkResponse>>;
    addBookmark(request: AddBookmarkRequest & {
        activity_id: string;
    }): Promise<StreamResponse<AddBookmarkResponse>>;
    activityFeedback(request: ActivityFeedbackRequest & {
        activity_id: string;
    }): Promise<StreamResponse<ActivityFeedbackResponse>>;
    castPollVote(request: CastPollVoteRequest & {
        activity_id: string;
        poll_id: string;
    }): Promise<StreamResponse<PollVoteResponse>>;
    deletePollVote(request: {
        activity_id: string;
        poll_id: string;
        vote_id: string;
        user_id?: string;
    }): Promise<StreamResponse<PollVoteResponse>>;
    addReaction(request: AddReactionRequest & {
        activity_id: string;
    }): Promise<StreamResponse<AddReactionResponse>>;
    queryActivityReactions(request: QueryActivityReactionsRequest & {
        activity_id: string;
    }): Promise<StreamResponse<QueryActivityReactionsResponse>>;
    deleteActivityReaction(request: {
        activity_id: string;
        type: string;
        user_id?: string;
    }): Promise<StreamResponse<DeleteActivityReactionResponse>>;
    deleteActivity(request: {
        id: string;
        hard_delete?: boolean;
    }): Promise<StreamResponse<DeleteActivityResponse>>;
    getActivity(request: {
        id: string;
    }): Promise<StreamResponse<GetActivityResponse>>;
    updateActivityPartial(request: UpdateActivityPartialRequest & {
        id: string;
    }): Promise<StreamResponse<UpdateActivityPartialResponse>>;
    updateActivity(request: UpdateActivityRequest & {
        id: string;
    }): Promise<StreamResponse<UpdateActivityResponse>>;
    queryBookmarkFolders(request?: QueryBookmarkFoldersRequest): Promise<StreamResponse<QueryBookmarkFoldersResponse>>;
    deleteBookmarkFolder(request: {
        folder_id: string;
    }): Promise<StreamResponse<DeleteBookmarkFolderResponse>>;
    updateBookmarkFolder(request: UpdateBookmarkFolderRequest & {
        folder_id: string;
    }): Promise<StreamResponse<UpdateBookmarkFolderResponse>>;
    queryBookmarks(request?: QueryBookmarksRequest): Promise<StreamResponse<QueryBookmarksResponse>>;
    getComments(request: {
        object_id: string;
        object_type: string;
        depth?: number;
        sort?: string;
        replies_limit?: number;
        limit?: number;
        prev?: string;
        next?: string;
    }): Promise<StreamResponse<GetCommentsResponse>>;
    addComment(request: AddCommentRequest): Promise<StreamResponse<AddCommentResponse>>;
    addCommentsBatch(request: AddCommentsBatchRequest): Promise<StreamResponse<AddCommentsBatchResponse>>;
    queryComments(request: QueryCommentsRequest): Promise<StreamResponse<QueryCommentsResponse>>;
    deleteComment(request: {
        id: string;
        hard_delete?: boolean;
    }): Promise<StreamResponse<DeleteCommentResponse>>;
    getComment(request: {
        id: string;
    }): Promise<StreamResponse<GetCommentResponse>>;
    updateComment(request: UpdateCommentRequest & {
        id: string;
    }): Promise<StreamResponse<UpdateCommentResponse>>;
    addCommentReaction(request: AddCommentReactionRequest & {
        id: string;
    }): Promise<StreamResponse<AddCommentReactionResponse>>;
    queryCommentReactions(request: QueryCommentReactionsRequest & {
        id: string;
    }): Promise<StreamResponse<QueryCommentReactionsResponse>>;
    deleteCommentReaction(request: {
        id: string;
        type: string;
        user_id?: string;
    }): Promise<StreamResponse<DeleteCommentReactionResponse>>;
    getCommentReplies(request: {
        id: string;
        depth?: number;
        sort?: string;
        replies_limit?: number;
        limit?: number;
        prev?: string;
        next?: string;
    }): Promise<StreamResponse<GetCommentRepliesResponse>>;
    listFeedGroups(): Promise<StreamResponse<ListFeedGroupsResponse>>;
    createFeedGroup(request: CreateFeedGroupRequest): Promise<StreamResponse<CreateFeedGroupResponse>>;
    deleteFeed(request: {
        feed_group_id: string;
        feed_id: string;
        hard_delete?: boolean;
    }): Promise<StreamResponse<DeleteFeedResponse>>;
    getOrCreateFeed(request: GetOrCreateFeedRequest & {
        feed_group_id: string;
        feed_id: string;
    }): Promise<StreamResponse<GetOrCreateFeedResponse>>;
    updateFeed(request: UpdateFeedRequest & {
        feed_group_id: string;
        feed_id: string;
    }): Promise<StreamResponse<UpdateFeedResponse>>;
    markActivity(request: MarkActivityRequest & {
        feed_group_id: string;
        feed_id: string;
    }): Promise<StreamResponse<Response>>;
    unpinActivity(request: {
        feed_group_id: string;
        feed_id: string;
        activity_id: string;
        user_id?: string;
    }): Promise<StreamResponse<UnpinActivityResponse>>;
    pinActivity(request: PinActivityRequest & {
        feed_group_id: string;
        feed_id: string;
        activity_id: string;
    }): Promise<StreamResponse<PinActivityResponse>>;
    updateFeedMembers(request: UpdateFeedMembersRequest & {
        feed_group_id: string;
        feed_id: string;
    }): Promise<StreamResponse<UpdateFeedMembersResponse>>;
    acceptFeedMemberInvite(request: AcceptFeedMemberInviteRequest & {
        feed_id: string;
        feed_group_id: string;
    }): Promise<StreamResponse<AcceptFeedMemberInviteResponse>>;
    queryFeedMembers(request: QueryFeedMembersRequest & {
        feed_group_id: string;
        feed_id: string;
    }): Promise<StreamResponse<QueryFeedMembersResponse>>;
    rejectFeedMemberInvite(request: RejectFeedMemberInviteRequest & {
        feed_group_id: string;
        feed_id: string;
    }): Promise<StreamResponse<RejectFeedMemberInviteResponse>>;
    getFollowSuggestions(request: {
        feed_group_id: string;
        limit?: number;
        user_id?: string;
    }): Promise<StreamResponse<GetFollowSuggestionsResponse>>;
    deleteFeedGroup(request: {
        id: string;
        hard_delete?: boolean;
    }): Promise<StreamResponse<DeleteFeedGroupResponse>>;
    getFeedGroup(request: {
        id: string;
    }): Promise<StreamResponse<GetFeedGroupResponse>>;
    getOrCreateFeedGroup(request: GetOrCreateFeedGroupRequest & {
        id: string;
    }): Promise<StreamResponse<GetOrCreateFeedGroupResponse>>;
    updateFeedGroup(request: UpdateFeedGroupRequest & {
        id: string;
    }): Promise<StreamResponse<UpdateFeedGroupResponse>>;
    listFeedViews(): Promise<StreamResponse<ListFeedViewsResponse>>;
    createFeedView(request: CreateFeedViewRequest): Promise<StreamResponse<CreateFeedViewResponse>>;
    deleteFeedView(request: {
        id: string;
    }): Promise<StreamResponse<DeleteFeedViewResponse>>;
    getFeedView(request: {
        id: string;
    }): Promise<StreamResponse<GetFeedViewResponse>>;
    getOrCreateFeedView(request: GetOrCreateFeedViewRequest & {
        id: string;
    }): Promise<StreamResponse<GetOrCreateFeedViewResponse>>;
    updateFeedView(request: UpdateFeedViewRequest & {
        id: string;
    }): Promise<StreamResponse<UpdateFeedViewResponse>>;
    listFeedVisibilities(): Promise<StreamResponse<ListFeedVisibilitiesResponse>>;
    getFeedVisibility(request: {
        name: string;
    }): Promise<StreamResponse<GetFeedVisibilityResponse>>;
    createFeedsBatch(request: CreateFeedsBatchRequest): Promise<StreamResponse<CreateFeedsBatchResponse>>;
    protected _queryFeeds(request?: QueryFeedsRequest): Promise<StreamResponse<QueryFeedsResponse>>;
    updateFollow(request: UpdateFollowRequest): Promise<StreamResponse<UpdateFollowResponse>>;
    follow(request: FollowRequest): Promise<StreamResponse<SingleFollowResponse>>;
    acceptFollow(request: AcceptFollowRequest): Promise<StreamResponse<AcceptFollowResponse>>;
    followBatch(request: FollowBatchRequest): Promise<StreamResponse<FollowBatchResponse>>;
    queryFollows(request?: QueryFollowsRequest): Promise<StreamResponse<QueryFollowsResponse>>;
    rejectFollow(request: RejectFollowRequest): Promise<StreamResponse<RejectFollowResponse>>;
    unfollow(request: {
        source: string;
        target: string;
    }): Promise<StreamResponse<UnfollowResponse>>;
    createMembershipLevel(request: CreateMembershipLevelRequest): Promise<StreamResponse<CreateMembershipLevelResponse>>;
    queryMembershipLevels(request?: QueryMembershipLevelsRequest): Promise<StreamResponse<QueryMembershipLevelsResponse>>;
    deleteMembershipLevel(request: {
        id: string;
    }): Promise<StreamResponse<Response>>;
    updateMembershipLevel(request: UpdateMembershipLevelRequest & {
        id: string;
    }): Promise<StreamResponse<UpdateMembershipLevelResponse>>;
    unfollowBatch(request: UnfollowBatchRequest): Promise<StreamResponse<UnfollowBatchResponse>>;
    deleteFeedUserData(request: {
        user_id: string;
    }): Promise<StreamResponse<DeleteFeedUserDataResponse>>;
    exportFeedUserData(request: {
        user_id: string;
    }): Promise<StreamResponse<ExportFeedUserDataResponse>>;
}
